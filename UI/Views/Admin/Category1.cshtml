
<div class="container py-5">
    <div class="card">
        <div class="card-header">
            <h2><i class="fas fa-th-list me-2"></i>Categories</h2>
            <button type="button" class="btn btn-primary actions" id="createBtn">
                <i class="fas fa-plus me-2"></i>Create
            </button>
        </div>

        <div class="search-box">
            <div class="search-element">
                <select class="form-select" name="searchBy" id="searchBy">
                    @foreach (var field in ViewBag.SearchFields)
                    {
                        if (field.Key == ViewBag.searchBy)
                        {
                            <option selected="selected" value="@field.Key"> @field.Value</option>
                        }
                        else
                        {
                            <option value="@field.Key"> @field.Value</option>
                        }
                    }
                </select>
            </div>
            <div class="search-element">
                <input type="search" class="form-control" placeholder="Search" name="searchString" value="@ViewBag.SearchString"  id="searchString"/>
            </div>
            <div class="search-element d-flex">
                <button type="button" id="searchBtn" class="btn btn-primary flex-grow-1">
                    <i class="fas fa-search me-2"></i>Search
                </button>
                <a href="#" id="clearBtn" class="link-hover d-flex align-items-center ms-3" style="text-decoration: none">
                    <i class="fas fa-times me-1"></i>Clear
                </a>
            </div>
        </div>

        <div class="card-body">
            <div class="table-container">
                <table class="table table-striped">
                    <thead>
                    <tr>
                        <th width="10%" class="text-center">ID</th>
                        <th width="30%">Name</th>
                        <th width="40%">Description</th>
                        <th width="20%" class="text-center">Actions</th>
                    </tr>
                    </thead>
                    <tbody id="categories">
                  
                    </tbody>
                </table>
            </div>

            <div class="text-center py-4 d-none" id="noResults">
                <i class="fas fa-search fa-3x text-muted mb-3"></i>
                <h5>No categories found</h5>
                <p class="text-muted">Try adjusting your search criteria</p>
            </div>
        </div>
    </div>
</div>

<div id="overlay">
    <div class="spinner"></div>
</div>


<div class="confirmation-dialog" id="confirmDialog">
    <div class="icon">
        <i class="fas fa-exclamation-triangle"></i>
    </div>
    <h3>Delete Category</h3>
    <p>Are you sure you want to delete this category? This action cannot be undone.</p>
    <div class="confirmation-actions">
        <button class="btn btn-secondary" id="cancelDelete">
            <i class="fas fa-times me-2"></i>Cancel
        </button>
        <button class="btn btn-danger" id="confirmDelete">
            <i class="fas fa-trash-alt me-2"></i>Delete
        </button>
    </div>
</div>

<script>
    let currentDeleteId = null;
    let searchTimeout = null;

    $(document).ready(function() {
        // Initialize tooltips
        setupToastr();
        handleSearch();

        // Event listeners
        $('#createBtn').on('click', createRecord);
        $('#searchBtn').on('click', handleSearch);
        $('#clearBtn').on('click', clearSearch);
        $('#searchString').on('input', debounceSearch);
        $('#cancelDelete').on('click', hideConfirmDialog);
        $('#confirmDelete').on('click', executeDelete);

        // Close confirmation dialog on escape key
        $(document).keyup(function(e) {
            if (e.key === "Escape") {
                hideConfirmDialog();
            }
        });

        // Close dialog when clicking outside
        $(document).on('click', function(e) {
            if ($(e.target).is('#overlay')) {
                hideConfirmDialog();
            }
        });
    });

    function setupToastr() {
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "3000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };
    }

    function debounceSearch() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(handleSearch, 500);
    }

    function handleSearch() {
        const searchBy = $('#searchBy').val();
        const searchString = $('#searchString').val().toLowerCase();
        const size = 10;
        const page = 1;
        let filter = {
            propertyName: searchBy,
            operation: 6, 
            value: searchString,
            size: size,
            page: page
        };
        showLoading();

        setTimeout(() => {
            $.ajax({
                url : "@Url.Action("GetAllCategories", "Admin")",
                type:"POST",
                data: JSON.stringify(filter),
                contentType: "application/json",
                success: function (data){
                    if (data.isSuccess){
                        renderCategories(data.result);
                        hideLoading();

                        if (data.result.length === 0) {
                            $('#noResults').removeClass('d-none');
                        } else {
                            $('#noResults').addClass('d-none');
                        }
                    }
                    else {
                        toastr.options = {
                            "positionClass": "toast-top-right",
                            "timeOut": "3000",
                            "closeButton": true,
                            "progressBar": true
                        };
                        toastr.error(` ${xhr.status} - ${data.message}`);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    toastr.options = {
                        "positionClass": "toast-top-right",
                        "timeOut": "3000",
                        "closeButton": true,
                        "progressBar": true
                    };
                    toastr.error(` ${xhr.status} - ${thrownError}`, "So'rov bajarilmadi");
                }
            })
        }, 500); 
    }

    function clearSearch() {
        $('#searchString').val('');
        $('#searchBy').val('name');
        handleSearch();
    }


    function renderCategories(data) {
        $('#categories').empty();

        if (data.length === 0) {
            $('#noResults').removeClass('d-none');
            return;
        }

        $('#noResults').addClass('d-none');

        data.forEach((item, index) => {
            const row = $(`<tr id="trid_${index}" class="row-enter"></tr>`);
            displayTableRow('display', index, item.id, item.name, item.description, row);
            $('#categories').append(row);
        });
    }

    function displayTableRow(mode, index, id, name, description, rowElement) {
        let row = rowElement || $(`#trid_${index}`);
        row.empty();
        let innerHtml = "";

        innerHtml += `<td class="text-center"><span class="badge bg-secondary">${id}</span></td>`;

        if (mode == 'display') {
            $('.actions').prop('disabled', false);

            innerHtml += `<td>${name}</td>`;
            innerHtml += `<td>${description}</td>`;
            innerHtml += `<td class="text-center">`;
            innerHtml += `<button onclick="editRecord(${index}, ${id}, '${name}', '${description}')" class="btn btn-warning text-white me-2 action-btn actions">
                                <i class="fas fa-edit"></i> Edit
                              </button>`;
            innerHtml += `<button onclick="deleteRecord(${id})" class="btn btn-danger text-white action-btn actions">
                                <i class="fas fa-trash-alt"></i> Delete
                              </button>`;
            innerHtml += `</td>`;
        }
        else if (mode == 'edit') {
            $('.actions').prop('disabled', true);

            innerHtml += `<td>
                                <input id="input_${index}" type="text" value="${name}" class="form-control">
                                <span id="validationTextId_${index}" class="validation-message"></span>
                              </td>`;
            innerHtml += `<td>
                                <input id="input_description${index}" type="text" value="${description}" class="form-control">
                                <span id="validationTextId_description${index}" class="validation-message"></span>
                              </td>`;
            innerHtml += `<td class="text-center">`;
            innerHtml += `<button onclick="save(${index}, ${id})" class="btn btn-success text-white me-2 action-btn">
                                <i class="fas fa-save"></i> Save
                              </button>`;
            innerHtml += `<button onclick="cancelEdit(${index}, ${id}, '${name}', '${description}')" class="btn btn-secondary text-white action-btn">
                                <i class="fas fa-times"></i> Cancel
                              </button>`;
            innerHtml += `</td>`;
        }

        row.append(innerHtml);
    }

    function editRecord(index, id, name, description) {
        displayTableRow('edit', index, id, name, description);
        $(`#input_${index}`).focus();

        // Highlight the row being edited
        $(`#trid_${index}`).addClass('bg-light').siblings().removeClass('bg-light');
    }

    function cancelEdit(index, id, name, description) {
        displayTableRow('display', index, id, name, description);
        $(`#trid_${index}`).removeClass('bg-light');
    }

    function createRecord() {
        $('.actions').prop('disabled', true);

        // Add new row at the top with animation
        const index = $('#categories tr').length;
        const newRow = $(`<tr id="trid_${index}" class="row-enter bg-light"></tr>`);

        let innerHtml = '';
        innerHtml += `<td class="text-center"><span class="badge bg-info">New</span></td>`;
        innerHtml += `<td>
                            <input id="input_${index}" type="text" class="form-control" placeholder="Enter name">
                            <span id="validationTextId_${index}" class="validation-message"></span>
                          </td>`;
        innerHtml += `<td>
                            <input id="input_description${index}" type="text" class="form-control" placeholder="Enter description">
                            <span id="validationTextId_description${index}" class="validation-message"></span>
                          </td>`;
        innerHtml += `<td class="text-center">
                            <button onclick="save(${index}, 0)" class="btn btn-success text-white me-2 action-btn">
                                <i class="fas fa-save"></i> Save
                            </button>
                            <button onclick="cancelCreate(${index})" class="btn btn-secondary text-white action-btn">
                                <i class="fas fa-times"></i> Cancel
                            </button>
                          </td>`;

        newRow.html(innerHtml);
        $('#categories').prepend(newRow);
        $(`#input_${index}`).focus();
    }

    function cancelCreate(index) {
        $(`#trid_${index}`).addClass('row-exit');

        setTimeout(() => {
            $(`#trid_${index}`).remove();
            $('.actions').prop('disabled', false);
        }, 300);
    }

    async function deleteRecord(Id) {
        let result = await confirmation('Are you sure you want to delete this category?');
        if (result){
            $.ajax({
                url: '@Url.Action("Delete", "Admin")' + '?id=' + Id,
                type: 'DELETE',
                success: function (response) {
                    handleSearch();
                    displaynotification(response.isSuccess, response.title, response.message, 'modal');
                },
                error: function (xhr, status, error) {
                    displaynotification(false, response.title, response.message, 'modal');
                }
            });
        }
    }

    function hideConfirmDialog() {
        $('#confirmDialog').removeClass('active');
        setTimeout(() => {
            $('#confirmDialog').hide();
            $('#overlay').fadeOut(200);
        }, 300);
    }

    function executeDelete() {
        hideConfirmDialog();
        showLoading();

        // Find the index of the category to delete
        const categoryToDelete = sampleCategories.findIndex(item => item.id === currentDeleteId);

        // Simulate AJAX delay
        setTimeout(() => {
            if (categoryToDelete !== -1) {
                // Mark the row for animation
                const rowToDelete = $('#categories tr').filter(function() {
                    return $(this).find('.badge').text() == currentDeleteId;
                });

                rowToDelete.addClass('row-exit');

                // Wait for animation to complete
                setTimeout(() => {
                    // Remove from our sample data
                    sampleCategories.splice(categoryToDelete, 1);

                    // Re-render the table
                    renderCategories(sampleCategories);
                    hideLoading();

                    displayNotification(true, "Success", "Category deleted successfully", 'toastr');
                }, 300);
            } else {
                hideLoading();
                displayNotification(false, "Error", "Category not found", 'toastr');
            }
        }, 800);
    }

    function save(index, id) {
        const name = $(`#input_${index}`).val();
        const description = $(`#input_description${index}`).val();

        // Reset validation messages
        $(`#validationTextId_${index}`).text('');
        $(`#validationTextId_description${index}`).text('');
        $(`#input_${index}`).removeClass('is-invalid');
        $(`#input_description${index}`).removeClass('is-invalid');

        // Validation
        let isValid = true;

        if (!name) {
            $(`#validationTextId_${index}`).text('Name is required');
            $(`#input_${index}`).addClass('is-invalid').focus();
            isValid = false;
        }

        if (!isValid) return;

        showLoading();

        // Simulate AJAX delay
        setTimeout(() => {
           

                const newCategory = {
                    id: id,
                    name: name,
                    description: description
                };

                $.ajax({
                    url: "@Url.Action("AddorEditCategory")",
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(newCategory),
                    success(response) {
                        toastr.options = {
                            "positionClass": "toast-top-right",
                            "timeOut": "3000",
                            "closeButton": true,
                            "progressBar": true
                        };
                        handleSearch();
                        if (id === 0) {
                            displayNotification(true, "Success", "Category created successfully", 'toastr');
                        }
                        else {
                            displayNotification(true, "Success", "Category updated successfully", 'toastr');
                        }
                       
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        toastr.options = {
                            "positionClass": "toast-top-right",
                            "timeOut": "3000",
                            "closeButton": true,
                            "progressBar": true
                        };
                        displaynotification(false, xhr, thrownError, 'toastr');
                    }
                });

            hideLoading();
            $('.actions').prop('disabled', false);
        }, 800);
    }

    function showLoading() {
        $('#overlay').fadeIn(200);
    }

    function hideLoading() {
        $('#overlay').fadeOut(200);
    }

    function displayNotification(isSuccess, title, message, type) {
        if (type === 'toastr') {
            if (isSuccess) {
                toastr.success(message, title);
            } else {
                toastr.error(message, title);
            }
        }
    }
</script>
    <style>
        :root {
            --primary-color: #3498db;
            --secondary-color: #2c3e50;
            --success-color: #2ecc71;
            --danger-color: #e74c3c;
            --warning-color: #f39c12;
            --light-color: #f8f9fa;
            --dark-color: #343a40;
        }

        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            transition: background-color 0.3s ease;
        }

        .container {
            padding-top: 30px;
            padding-bottom: 30px;
        }

        .card {
            border-radius: 12px;
            box-shadow: 0 6px 18px rgba(0, 0, 0, 0.1);
            border: none;
            margin-bottom: 25px;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
        }

        .card-header {
            background: linear-gradient(135deg, var(--secondary-color), #34495e);
            color: white;
            border-radius: 12px 12px 0 0 !important;
            padding: 20px;
            font-weight: 500;
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            align-items: center;
        }

        .card-header h2 {
            margin: 0;
            display: flex;
            align-items: center;
            font-size: 1.5rem;
        }

        .card-header h2 i {
            margin-right: 10px;
        }

        .btn {
            border-radius: 8px;
            padding: 10px 20px;
            font-weight: 500;
            transition: all 0.3s;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn i {
            margin-right: 8px;
        }

        .btn-primary {
            background: linear-gradient(to right, var(--primary-color), #2980b9);
            border: none;
        }

        .btn-success {
            background: linear-gradient(to right, var(--success-color), #27ae60);
            border: none;
        }

        .btn-warning {
            background: linear-gradient(to right, var(--warning-color), #e67e22);
            border: none;
        }

        .btn-danger {
            background: linear-gradient(to right, var(--danger-color), #c0392b);
            border: none;
        }

        .search-box {
            margin: 15px 0;
            padding: 20px;
            border-radius: 12px;
            border: 1px solid #e9ecef;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            background-color: white;
            display: flex;
            flex-wrap: wrap;
            align-items: stretch;
            gap: 10px;
            transition: box-shadow 0.3s;
        }

        .search-box:focus-within {
            box-shadow: 0 6px 15px rgba(52, 152, 219, 0.15);
        }

        .search-element {
            flex: 1;
            min-width: 200px;
        }

        .form-control, .form-select {
            border-radius: 8px;
            padding: 12px 15px;
            border: 1px solid #dee2e6;
            transition: all 0.3s;
            height: 48px;
        }

        .form-control:focus, .form-select:focus {
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.25);
            border-color: var(--primary-color);
        }

        .link-hover {
            color: var(--primary-color);
            transition: color 0.2s;
            margin-left: 10px;
        }

        .link-hover:hover {
            color: #2980b9;
            text-decoration: underline !important;
        }

        .table-container {
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            background-color: white;
        }

        .table {
            margin-bottom: 0;
        }

        .table thead {
            background: linear-gradient(to right, var(--secondary-color), #34495e);
            color: white;
        }

        .table thead th {
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.85rem;
            letter-spacing: 0.5px;
            padding: 15px;
            vertical-align: middle;
            border: none;
        }

        .table tbody tr {
            transition: background-color 0.2s, transform 0.2s;
        }

        .table tbody tr:nth-child(even) {
            background-color: #f8f9fa;
        }

        .table tbody tr:hover {
            background-color: #e9f0f5;
            transform: scale(1.01);
        }

        .table td {
            padding: 15px;
            vertical-align: middle;
            border-color: #e9ecef;
        }

        .badge {
            padding: 7px 12px;
            border-radius: 6px;
            font-weight: 500;
            transition: all 0.2s;
        }

        .badge:hover {
            transform: scale(1.1);
        }

        .action-btn {
            margin-right: 5px;
            padding: 8px 15px;
            margin-bottom: 5px;
        }

        .is-invalid {
            border-color: var(--danger-color) !important;
            box-shadow: 0 0 0 2px rgba(231, 76, 60, 0.25) !important;
        }

        .validation-message {
            color: var(--danger-color);
            font-size: 0.85rem;
            margin-top: 5px;
            display: block;
            transition: all 0.3s;
            height: 20px;
        }

        #overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        .confirmation-dialog {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.9);
            background-color: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            max-width: 450px;
            width: 90%;
            z-index: 1001;
            opacity: 0;
            display: none;
            text-align: center;
            transition: all 0.3s;
        }

        .confirmation-dialog.active {
            opacity: 1;
            transform: translate(-50%, -50%) scale(1);
        }

        .confirmation-dialog .icon {
            font-size: 50px;
            color: var(--danger-color);
            margin-bottom: 20px;
        }

        .confirmation-dialog h3 {
            margin-bottom: 15px;
            color: var(--dark-color);
        }

        .confirmation-dialog p {
            margin-bottom: 25px;
            color: #666;
        }

        .confirmation-actions {
            display: flex;
            justify-content: center;
            gap: 15px;
        }

        /* Row animations */
        .row-enter {
            animation: fadeInUp 0.4s forwards;
        }

        .row-exit {
            animation: fadeOutDown 0.3s forwards;
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @@keyframes fadeOutDown {
            from {
                opacity: 1;
                transform: translateY(0);
            }
            to {
                opacity: 0;
                transform: translateY(20px);
            }
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Toast animations */
        @@keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* Responsive adjustments */
        @@media (max-width: 768px) {
        .card-header {
            flex-direction: column;
            align-items: stretch;
            gap: 10px;
        }

        .search-box {
            flex-direction: column;
        }

        .table-responsive {
            border-radius: 8px;
            overflow: hidden;
        }
        }
    </style>