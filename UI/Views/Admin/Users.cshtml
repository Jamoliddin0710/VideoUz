<div class="container py-5">
    <div class="card">
        <div class="card-header">
            <h2><i class="fas fa-users me-2"></i>Users</h2>
            <button type="button" class="btn btn-primary actions" id="createBtn">
                <i class="fas fa-plus me-2"></i>Create User
            </button>
        </div>

        <div class="search-box">
            <div class="search-element">
                <select class="form-select" name="searchBy" id="searchBy">
                    @foreach (var field in ViewBag.SearchFields)
                    {
                        if (field.Key == ViewBag.searchBy)
                        {
                            <option selected="selected" value="@field.Key"> @field.Value</option>
                        }
                        else
                        {
                            <option value="@field.Key"> @field.Value</option>
                        }
                    }
                </select>
            </div>
            <div class="search-element">
                <input type="search" class="form-control" placeholder="Search" name="searchString"
                       value="@ViewBag.SearchString" id="searchString"/>
            </div>
            <div class="search-element d-flex">
                <button type="button" id="searchBtn" class="btn btn-primary flex-grow-1">
                    <i class="fas fa-search me-2"></i>Search
                </button>
                <a href="#" id="clearBtn" class="link-hover d-flex align-items-center ms-3"
                   style="text-decoration: none">
                    <i class="fas fa-times me-1"></i>Clear
                </a>
            </div>
        </div>

        <div class="card-body">
            <div class="table-container">
                <table class="table table-striped">
                    <thead>
                    <tr>
                        <th width="5%" class="text-center">ID</th>
                        <th width="15%">Name</th>
                        <th width="15%">Username</th>
                        <th width="15%">Email</th>
                        <th width="15%">Phone</th>
                        <th width="15%">Role</th>
                        <th width="20%" class="text-center">Actions</th>
                    </tr>
                    </thead>
                    <tbody id="categories">

                    </tbody>
                </table>
            </div>

            <div class="text-center py-4 d-none" id="noResults">
                <i class="fas fa-search fa-3x text-muted mb-3"></i>
                <h5>No users found</h5>
                <p class="text-muted">Try adjusting your search criteria</p>
            </div>
        </div>
    </div>
</div>

<div id="overlay">
    <div class="spinner"></div>
</div>


<div class="confirmation-dialog" id="confirmDialog">
    <div class="icon">
        <i class="fas fa-exclamation-triangle"></i>
    </div>
    <h3>Delete User</h3>
    <p>Are you sure you want to delete this user? This action cannot be undone.</p>
    <div class="confirmation-actions">
        <button class="btn btn-secondary" id="cancelDelete">
            <i class="fas fa-times me-2"></i>Cancel
        </button>
        <button class="btn btn-danger" id="confirmDelete">
            <i class="fas fa-trash-alt me-2"></i>Delete
        </button>
    </div>
</div>

<script>
    let currentDeleteId = null;
    let searchTimeout = null;
    const allRoles = @Html.Raw(Json.Serialize(ViewBag.Roles));
    $(document).ready(function () {
        // Initialize tooltips
        setupToastr();
        handleSearch();

        // Event listeners
        $('#createBtn').on('click', createRecord);
        $('#searchBtn').on('click', handleSearch);
        $('#clearBtn').on('click', clearSearch);
        $('#searchString').on('input', debounceSearch);
        $('#cancelDelete').on('click', hideConfirmDialog);
        $('#confirmDelete').on('click', executeDelete);

        // Close confirmation dialog on escape key
        $(document).keyup(function (e) {
            if (e.key === "Escape") {
                hideConfirmDialog();
            }
        });

        // Close dialog when clicking outside
        $(document).on('click', function (e) {
            if ($(e.target).is('#overlay')) {
                hideConfirmDialog();
            }
        });
    });

    function setupToastr() {
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "3000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };
    }

    function debounceSearch() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(handleSearch, 500);
    }

    function handleSearch() {
        const searchBy = $('#searchBy').val();
        const searchString = $('#searchString').val().toLowerCase();
        const size = 10;
        const page = 1;
        let filter = {
            propertyName: searchBy,
            operation: 6,
            value: searchString,
            size: size,
            page: page
        };
        showLoading();

        setTimeout(() => {
            $.ajax({
                url: "@Url.Action("GetAllUsers", "Admin")",
                type: "POST",
                data: JSON.stringify(filter),
                contentType: "application/json",
                success: function (data) {
                    if (data.isSuccess) {
                        renderUsers(data.result);
                        hideLoading();

                        if (data.result.length === 0) {
                            $('#noResults').removeClass('d-none');
                        } else {
                            $('#noResults').addClass('d-none');
                        }
                    } else {
                        toastr.options = {
                            "positionClass": "toast-top-right",
                            "timeOut": "3000",
                            "closeButton": true,
                            "progressBar": true
                        };
                        toastr.error(` ${xhr.status} - ${data.message}`);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    toastr.options = {
                        "positionClass": "toast-top-right",
                        "timeOut": "3000",
                        "closeButton": true,
                        "progressBar": true
                    };
                    toastr.error(` ${xhr.status} - ${thrownError}`, "So'rov bajarilmadi");
                }
            })
        }, 500);
    }

    function clearSearch() {
        $('#searchString').val('');
        $('#searchBy').val('name');
        handleSearch();
    }


    function renderUsers(data) {
        $('#categories').empty();

        if (data.length === 0) {
            $('#noResults').removeClass('d-none');
            return;
        }

        $('#noResults').addClass('d-none');

        data.forEach((item, index) => {
            const row = $(`<tr id="trid_${index}" class="row-enter"></tr>`);
            displayTableRow('display', index, item.id, item.name, item.userName, item.email, item.phone, item.role, row);
            $('#categories').append(row);
        });
    }

    function displayTableRow(mode, index, id, name, username, email, phone, role, rowElement) {
        let row = rowElement || $(`#trid_${index}`);
        row.empty();
        let innerHtml = "";

        innerHtml += `<td class="text-center"><span class="badge bg-secondary">${id}</span></td>`;

        if (mode == 'display') {
            $('.actions').prop('disabled', false);

            innerHtml += `<td>${name}</td>`;
            innerHtml += `<td>${username}</td>`;
            innerHtml += `<td>${email}</td>`;
            innerHtml += `<td>${phone}</td>`;
            innerHtml += `<td>${role}</td>`;
            innerHtml += `<td class="text-center">
            <button onclick="editRecord(${index}, ${id}, '${name}', '${username}', '${email}', '${phone}', '${role}')" class="btn btn-warning text-white me-2 action-btn actions">
                <i class="fas fa-edit"></i> Edit
            </button>
            <button onclick="deleteRecord(${id})" class="btn btn-danger text-white action-btn actions">
                <i class="fas fa-trash-alt"></i> Delete
            </button>
        </td>`;
        } else if (mode == 'edit') {
            $('.actions').prop('disabled', true);

            innerHtml += `<td>
            <input id="input_name_${index}" type="text" value="${name}" class="form-control">
            <span id="validationTextId_name_${index}" class="validation-message"></span>
        </td>`;
            innerHtml += `<td>
            <input id="input_username_${index}" type="text" value="${username}" class="form-control">
            <span id="validationTextId_username_${index}" class="validation-message"></span>
        </td>`;
            innerHtml += `<td>
            <input id="input_email_${index}" type="email" value="${email}" class="form-control">
            <span id="validationTextId_email_${index}" class="validation-message"></span>
        </td>`;
            innerHtml += `<td>
            <input id="input_phone_${index}" type="tel" value="${phone}" class="form-control">
            <span id="validationTextId_phone_${index}" class="validation-message"></span>
        </td>`;

            // Create select options dynamically based on allRoles
            let selectHtml = `<select id="input_role_${index}" class="form-select">`;
            for (let r of allRoles) {
                const selected = (r === role) ? 'selected' : '';
                selectHtml += `<option value="${r}" ${selected}>${r}</option>`;
            }
            selectHtml += `</select>`;

            innerHtml += `<td>
            ${selectHtml}
            <span id="validationTextId_role_${index}" class="validation-message"></span>
        </td>`;

            innerHtml += `<td class="text-center">
            <button onclick="save(${index}, ${id})" class="btn btn-success text-white me-2 action-btn">
                <i class="fas fa-save"></i> Save
            </button>
            <button onclick="cancelEdit(${index}, ${id}, '${name}', '${username}', '${email}', '${phone}', '${role}')" class="btn btn-secondary text-white action-btn">
                <i class="fas fa-times"></i> Cancel
            </button>
        </td>`;
        }

        row.append(innerHtml);
    }


    function editRecord(index, id, name, username, email, phone, role) {
        displayTableRow('edit', index, id, name, username, email, phone, role);
        $(`#input_name_${index}`).focus();

        // Highlight the row being edited
        $(`#trid_${index}`).addClass('bg-light').siblings().removeClass('bg-light');
    }

    function cancelEdit(index, id, name, username, email, phone, role) {
        displayTableRow('display', index, id, name, username, email, phone, role);
        $(`#trid_${index}`).removeClass('bg-light');
    }

    function createRecord() {
        $('.actions').prop('disabled', true);

        // Add new row at the top with animation
        const index = $('#categories tr').length;
        const newRow = $(`<tr id="trid_${index}" class="row-enter bg-light"></tr>`);

        let innerHtml = '';
        innerHtml += `<td class="text-center"><span class="badge bg-info">New</span></td>`;
        innerHtml += `<td>
                            <input id="input_name_${index}" type="text" class="form-control" placeholder="Enter name">
                            <span id="validationTextId_name_${index}" class="validation-message"></span>
                          </td>`;
        innerHtml += `<td>
                            <input id="input_username_${index}" type="text" class="form-control" placeholder="Enter username">
                            <span id="validationTextId_username_${index}" class="validation-message"></span>
                          </td>`;
        innerHtml += `<td>
                            <input id="input_email_${index}" type="email" class="form-control" placeholder="Enter email">
                            <span id="validationTextId_email_${index}" class="validation-message"></span>
                          </td>`;
        innerHtml += `<td>
                            <input id="input_phone_${index}" type="tel" class="form-control" placeholder="Enter phone">
                            <span id="validationTextId_phone_${index}" class="validation-message"></span>
                          </td>`;
        innerHtml += `<td>
<select id="input_role_${index}" class="form-select">
        @foreach (var role in (List<string>)ViewBag.Roles)
        {
            <option value="@role">@role</option>
        }
</select>
                                            <span id="validationTextId_role_${index}" class="validation-message"></span>
                          </td>`;
        innerHtml += `<td class="text-center">
                            <button onclick="save(${index}, 0)" class="btn btn-success text-white me-2 action-btn">
                                <i class="fas fa-save"></i> Save
                            </button>
                            <button onclick="cancelCreate(${index})" class="btn btn-secondary text-white action-btn">
                                <i class="fas fa-times"></i> Cancel
                            </button>
                          </td>`;

        newRow.html(innerHtml);
        $('#categories').prepend(newRow);
        $(`#input_name_${index}`).focus();
    }

    function cancelCreate(index) {
        $(`#trid_${index}`).addClass('row-exit');

        setTimeout(() => {
            $(`#trid_${index}`).remove();
            $('.actions').prop('disabled', false);
        }, 300);
    }

    function deleteRecord(id) {
        currentDeleteId = id;
        $('#confirmDialog').show().addClass('active');
        $('#overlay').fadeIn(200);
    }

    function hideConfirmDialog() {
        $('#confirmDialog').removeClass('active');
        setTimeout(() => {
            $('#confirmDialog').hide();
            $('#overlay').fadeOut(200);
        }, 300);
    }

    function executeDelete() {
        hideConfirmDialog();
        showLoading();

        $.ajax({
            url: '@Url.Action("DeleteUser", "Admin")' + '?id=' + currentDeleteId,
            type: 'DELETE',
            success: function (response) {
                hideLoading();
                handleSearch();
                displayNotification(response.isSuccess, response.title, response.message, 'toastr');
            },
            error: function (xhr, status, error) {
                hideLoading();
                displayNotification(false, "Error", "Failed to delete user", 'toastr');
            }
        });
    }

    function save(index, id) {
        const name = $(`#input_name_${index}`).val();
        const username = $(`#input_username_${index}`).val();
        const email = $(`#input_email_${index}`).val();
        const phone = $(`#input_phone_${index}`).val();
        const role = $(`#input_role_${index}`).val();

        // Reset validation messages
        $(`#validationTextId_name_${index}`).text('');
        $(`#validationTextId_username_${index}`).text('');
        $(`#validationTextId_email_${index}`).text('');
        $(`#validationTextId_phone_${index}`).text('');
        $(`#validationTextId_role_${index}`).text('');

        $(`#input_name_${index}`).removeClass('is-invalid');
        $(`#input_username_${index}`).removeClass('is-invalid');
        $(`#input_email_${index}`).removeClass('is-invalid');
        $(`#input_phone_${index}`).removeClass('is-invalid');
        $(`#input_role_${index}`).removeClass('is-invalid');

        // Validation
        let isValid = true;

        if (!name) {
            $(`#validationTextId_name_${index}`).text('Name is required');
            $(`#input_name_${index}`).addClass('is-invalid').focus();
            isValid = false;
        }

        if (!username) {
            $(`#validationTextId_username_${index}`).text('Username is required');
            $(`#input_username_${index}`).addClass('is-invalid').focus();
            isValid = false;
        }

        if (!email) {
            $(`#validationTextId_email_${index}`).text('Email is required');
            $(`#input_email_${index}`).addClass('is-invalid').focus();
            isValid = false;
        } else if (!isValidEmail(email)) {
            $(`#validationTextId_email_${index}`).text('Please enter a valid email');
            $(`#input_email_${index}`).addClass('is-invalid').focus();
            isValid = false;
        }

        if (!phone) {
            $(`#validationTextId_phone_${index}`).text('Phone is required');
            $(`#input_phone_${index}`).addClass('is-invalid').focus();
            isValid = false;
        } else if (!isValidPhone(phone)) {
            $(`#validationTextId_phone_${index}`).text('Please enter a valid phone number');
            $(`#input_phone_${index}`).addClass('is-invalid').focus();
            isValid = false;
        }

        if (!role) {
            $(`#validationTextId_role_${index}`).text('Role is required');
            $(`#input_role_${index}`).addClass('is-invalid').focus();
            isValid = false;
        }

        if (!isValid) return;

        showLoading();

        const userData = {
            id: id,
            name: name,
            username: username,
            email: email,
            phone: phone,
            role: role
        };

        $.ajax({
            url: "@Url.Action("SaveUser", "Admin")",
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(userData),
            success: function (response) {
                hideLoading();
                $('.actions').prop('disabled', false);

                if (response.isSuccess) {
                    handleSearch();
                    if (id === 0) {
                        displayNotification(true, "Success", "User created successfully", 'toastr');
                    } else {
                        displayNotification(true, "Success", "User updated successfully", 'toastr');
                    }
                } else {
                    displayNotification(false, "Error", response.message, 'toastr');
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                hideLoading();
                $('.actions').prop('disabled', false);
                displayNotification(false, "Error", "Failed to save user", 'toastr');
            }
        });
    }

    function isValidEmail(email) {
        const re = /^(([^<>()\[\]\\.,;:\s@@"]+(\.[^<>()\[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(String(email).toLowerCase());
    }

    function isValidPhone(phone) {
        // This is a basic phone validation that allows different formats
        // You can customize it according to your country's phone number format
        const re = /^[+]?[(]?[0-9]{1,4}[)]?[-\s.]?[0-9]{1,4}[-\s.]?[0-9]{1,9}$/;
        return re.test(phone);
    }

    function showLoading() {
        $('#overlay').fadeIn(200);
    }

    function hideLoading() {
        $('#overlay').fadeOut(200);
    }

    function displayNotification(isSuccess, title, message, type) {
        if (type === 'toastr') {
            if (isSuccess) {
                toastr.success(message, title);
            } else {
                toastr.error(message, title);
            }
        }
    }
</script>
<style>
    :root {
        --primary-color: #3498db;
        --secondary-color: #2c3e50;
        --success-color: #2ecc71;
        --danger-color: #e74c3c;
        --warning-color: #f39c12;
        --light-color: #f8f9fa;
        --dark-color: #343a40;
    }

    body {
        background-color: #f8f9fa;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        transition: background-color 0.3s ease;
    }

    .container {
        padding-top: 30px;
        padding-bottom: 30px;
    }

    .card {
        border-radius: 12px;
        box-shadow: 0 6px 18px rgba(0, 0, 0, 0.1);
        border: none;
        margin-bottom: 25px;
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
    }

    .card-header {
        background: linear-gradient(135deg, var(--secondary-color), #34495e);
        color: white;
        border-radius: 12px 12px 0 0 !important;
        padding: 20px;
        font-weight: 500;
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        align-items: center;
    }

    .card-header h2 {
        margin: 0;
        display: flex;
        align-items: center;
        font-size: 1.5rem;
    }

    .card-header h2 i {
        margin-right: 10px;
    }

    .btn {
        border-radius: 8px;
        padding: 10px 20px;
        font-weight: 500;
        transition: all 0.3s;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    }

    .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }

    .btn:active {
        transform: translateY(0);
    }

    .btn i {
        margin-right: 8px;
    }

    .btn-primary {
        background: linear-gradient(to right, var(--primary-color), #2980b9);
        border: none;
    }

    .btn-success {
        background: linear-gradient(to right, var(--success-color), #27ae60);
        border: none;
    }

    .btn-warning {
        background: linear-gradient(to right, var(--warning-color), #e67e22);
        border: none;
    }

    .btn-danger {
        background: linear-gradient(to right, var(--danger-color), #c0392b);
        border: none;
    }

    .search-box {
        margin: 15px 0;
        padding: 20px;
        border-radius: 12px;
        border: 1px solid #e9ecef;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
        background-color: white;
        display: flex;
        flex-wrap: wrap;
        align-items: stretch;
        gap: 10px;
        transition: box-shadow 0.3s;
    }

    .search-box:focus-within {
        box-shadow: 0 6px 15px rgba(52, 152, 219, 0.15);
    }

    .search-element {
        flex: 1;
        min-width: 200px;
    }

    .form-control, .form-select {
        border-radius: 8px;
        padding: 12px 15px;
        border: 1px solid #dee2e6;
        transition: all 0.3s;
        height: 48px;
    }

    .form-control:focus, .form-select:focus {
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.25);
        border-color: var(--primary-color);
    }

    .link-hover {
        color: var(--primary-color);
        transition: color 0.2s;
        margin-left: 10px;
    }

    .link-hover:hover {
        color: #2980b9;
        text-decoration: underline !important;
    }

    .table-container {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        background-color: white;
    }

    .table {
        margin-bottom: 0;
    }

    .table thead {
        background: linear-gradient(to right, var(--secondary-color), #34495e);
        color: white;
    }

    .table thead th {
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.85rem;
        letter-spacing: 0.5px;
        padding: 15px;
        vertical-align: middle;
        border: none;
    }

    .table tbody tr {
        transition: background-color 0.2s, transform 0.2s;
    }

    .table tbody tr:nth-child(even) {
        background-color: #f8f9fa;
    }

    .table tbody tr:hover {
        background-color: #e9f0f5;
        transform: scale(1.01);
    }

    .table td {
        padding: 15px;
        vertical-align: middle;
        border-color: #e9ecef;
    }

    .badge {
        padding: 7px 12px;
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.2s;
    }

    .badge:hover {
        transform: scale(1.1);
    }

    .action-btn {
        margin-right: 5px;
        padding: 8px 15px;
        margin-bottom: 5px;
    }

    .is-invalid {
        border-color: var(--danger-color) !important;
        box-shadow: 0 0 0 2px rgba(231, 76, 60, 0.25) !important;
    }

    .validation-message {
        color: var(--danger-color);
        font-size: 0.85rem;
        margin-top: 5px;
        display: block;
        transition: all 0.3s;
        height: 20px;
    }

    #overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid var(--primary-color);
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .confirmation-dialog {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) scale(0.9);
        background-color: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        max-width: 450px;
        width: 90%;
        z-index: 1001;
        opacity: 0;
        display: none;
        text-align: center;
        transition: all 0.3s;
    }

    .confirmation-dialog.active {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1);
    }

    .confirmation-dialog .icon {
        font-size: 50px;
        color: var(--danger-color);
        margin-bottom: 20px;
    }

    .confirmation-dialog h3 {
        margin-bottom: 15px;
        color: var(--dark-color);
    }

    .confirmation-dialog p {
        margin-bottom: 25px;
        color: #666;
    }

    .confirmation-actions {
        display: flex;
        justify-content: center;
        gap: 15px;
    }

    /* Row animations */
    .row-enter {
        animation: fadeInUp 0.4s forwards;
    }

    .row-exit {
        animation: fadeOutDown 0.3s forwards;
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes fadeOutDown {
        from {
            opacity: 1;
            transform: translateY(0);
        }
        to {
            opacity: 0;
            transform: translateY(20px);
        }
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }

    /* Toast animations */
    @@keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .card-header {
            flex-direction: column;
            align-items: stretch;
            gap: 10px;
        }

        .search-box {
            flex-direction: column;
        }

        .table-responsive {
            border-radius: 8px;
            overflow: hidden;
        }
    }
</style>